/**************************************************************************
**       Title: 
**    $RCSfile: $
**   $Revision: $$Name:  $
**       $Date: $
**   Copyright: GPL $Author: $
** Description:
**
**    
**
**-------------------------------------------------------------------------
**
**  $Log: $
**
**
**************************************************************************/

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
int
fanmerc::Character::statAsInt( const std::string& name, bool* exists) const
{
  return atoi( statAsString( name, exists).c_str());
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
template<class VALUETYPE>
inline
void
fanmerc::Character::setStat( const std::string& name, const VALUETYPE& value)
{
  std::stringstream stream;
  stream << value;
  _stats[name] = stream.str();
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
std::string
fanmerc::Character::statAsString( const std::string& name, bool* exists) const
{
  std::string ret;
  
  std::map<std::string,std::string>::const_iterator it = _stats.find( name);
  if( it != _stats.end())
  {
    if( exists != 0)
    {
      *exists = true;
    }
          
    ret = it->second;
  }
  else
  {
    if( exists != 0)
    {
      *exists = false;
    }
  }
    
  return ret;
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
std::string
fanmerc::Character::name() const
{
  return statAsString( "name");
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
int
fanmerc::Character::modStatAsInt( const std::string& name) const
{
  int ret = statAsInt( name);
  return ret;
}
  
/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
int
fanmerc::Character::HP() const
{
  return ( modStatAsInt( "attr_constitution") + 
           statAsInt( "level") * modStatAsInt( "attr_constitution") / 10);
}

/*=========================================================================
 *  DESCRIPTION OF FUNCTION:
 *  ==> see headerfile
 *=======================================================================*/
inline
int
fanmerc::Character::MP() const
{
  return ( modStatAsInt( "attr_magic") + 
           statAsInt( "level") * modStatAsInt( "attr_magic") / 10);
}

